import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';

import useLocalStorage from 'hooks/useLocalStorage';

const useFetch = endpoint => {
    const baseUrl = 'https://conduit.productionready.io/api';
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const [response, setResponse] = useState(null);
    const [options, setOptions] = useState({});
    const [token] = useLocalStorage('user_token');

    const handlerFetch = useCallback((options={}) => {
        setIsLoading(true);
        setOptions(options);
    }, []);

    useEffect(() => {
        let skipGetResponseAfterDestroy = false;
        const requestOptions = {
            ...options,
            ...{
                headers: {
                    authorization: token ? `Token ${token}` : ''
                }
            }
        };
        if ( !isLoading ) return;
        axios(baseUrl + endpoint, requestOptions)
        .then(response => {
            if ( !skipGetResponseAfterDestroy ) {
                setIsLoading(false);
                setResponse(response.data);
            }
        })
        .catch(error => {
            if ( !skipGetResponseAfterDestroy ) {
                setIsLoading(false);
                setError(error.response.data);
            }
        })

        return () => {
            skipGetResponseAfterDestroy = true;
        }
    }, [isLoading, options, endpoint, token]);

    return [{ response, isLoading, error }, handlerFetch];
}


export default useFetch;