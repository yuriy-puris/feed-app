import React, { useState, useEffect, useContext } from 'react';
import {Redirect} from 'react-router-dom';

import {CurrentUserContext} from 'contexts/currentUser';
import ArticleForm from 'sharedComponents/articleForm';
import useFetch from 'hooks/useFetch';


const EditArticle = ({match}) => {
    const slug = match.params.slug;
    const apiUrl = `/articles/${slug}`;
    const [currentUserState] = useContext(CurrentUserContext);
    const [{response: fetchArticleResponse}, handlerFetch] = useFetch(apiUrl);
    const [{response: updateArticleResponse, error: updateArticleError}, handlerUpdate] = useFetch(apiUrl);
    const [initialValues, setInitialValues] = useState(null);
    const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false);

    const handlerSubmit = article => {
        handlerUpdate({
            method: 'put',
            data: {
                article
            }
        })
    };

    useEffect(() => {
        handlerFetch();
    }, [handlerFetch]);

    useEffect(() => {
        if (!fetchArticleResponse) return;
        setInitialValues({
            title: fetchArticleResponse.article.title,
            body: fetchArticleResponse.article.body,
            description: fetchArticleResponse.article.description,
            tagList: fetchArticleResponse.article.tagList,
        });
    }, [fetchArticleResponse]);

    useEffect(() => {
        if (!updateArticleResponse) return;
        setIsSuccessFullSubmit(true);
    }, [updateArticleResponse])

    if (currentUserState.isLoggedIn === false) return <Redirect to="/" />;

    if (isSuccessFullSubmit) return <Redirect to={`/articles/${slug}`} />;

    return (
        <ArticleForm 
            onSubmit={handlerSubmit} 
            errors={(updateArticleError && updateArticleError.errors) || []}
            initialValues={initialValues}
         />
    )
};

export default EditArticle;